import { IUsersRegisteredVsUsersVerifiedPerYearReportResultRepository } from "../../report-results/users-registered-vs-users-verified-per-year/users-registered-vs-users-verified-per-year-report-result-repository";
import { IUserActivityLogRepository } from "../../user-activity-log/user-activity-log-repository";
import moment = require("moment");
import { IUsersRegisteredVsUsersVerifiedPerYearReportResultValue } from "../../report-results/users-registered-vs-users-verified-per-year/users-registered-vs-users-verified-per-year-report-result-value";
import { UsersRegisteredVsUsersVerifiedPerYearReportResultDbObject } from "../../report-results/users-registered-vs-users-verified-per-year/users-registered-vs-users-verified-per-year-report-result-db-object";
import { ReportResultMatchType } from "./models/report-result-match-type";
import { IIncomingTicketsVsPersonalizedTicketsPerYearReportResultValue } from "../../report-results/incoming-tickets-vs-personalized-tickets-per-year/incoming-tickets-vs-personalized-tickets-per-year-report-result-value";
import { IIncomingTicketsPerOrganizerReportResultRepository } from "../../report-results/incoming-tickets-per-organizer/incoming-tickets-per-organizer-report-result-repository";
import { IIncomingTicketsVsPersonalizedTicketsPerYearReportResultRepository } from "../../report-results/incoming-tickets-vs-personalized-tickets-per-year/incoming-tickets-vs-personalized-tickets-per-year-report-result-repository";
import { ITicketTransactionRepository } from "../../ticket-transactions/ticket-transaction-repository";
import { IncomingTicketsVsPersonalizedTicketsPerYearReportResultDbObject } from "../../report-results/incoming-tickets-vs-personalized-tickets-per-year/incoming-tickets-vs-personalized-tickets-per-year-report-result-db-object";
import { IIncomingTicketsPerOrganizerReportResultValue } from "../../report-results/incoming-tickets-per-organizer/incoming-tickets-per-organizer-report-result-value";
import { IncomingTicketsPerOrganizerReportResultDbObject } from "../../report-results/incoming-tickets-per-organizer/incoming-tickets-per-organizer-report-result-db-object";

export interface IReportsDataGeneratorController {
    generateUsersRegisteredVsUsersVerifiedGroupedPerYear();
    generateIncomingTicketsVsPersonalizedTicketsGroupedPerYear(organizerId: string);
    generateIncomingTicketsPerOrganizerGroupedPerMonth();
} 

export class ReportsDataGeneratorController implements IReportsDataGeneratorController {
    constructor(
        private userActivityLogRepository: IUserActivityLogRepository,
        private usersRegisteredVsUsersVerifiedRepository: IUsersRegisteredVsUsersVerifiedPerYearReportResultRepository,
        private incomingTicketsVsPersonalizedTicketsRepository: IIncomingTicketsVsPersonalizedTicketsPerYearReportResultRepository,
        private incomingTicketsPerOrganizerRepository: IIncomingTicketsPerOrganizerReportResultRepository,
        private ticketTransactionRepository: ITicketTransactionRepository) {
    }

    public async generateUsersRegisteredVsUsersVerifiedGroupedPerYear() {
        //get current year
        //previous ones were already generated by this very same method...

        const year = moment().year()

        const reportDataForCurrentYear: IUsersRegisteredVsUsersVerifiedPerYearReportResultValue =
            await this.usersRegisteredVsUsersVerifiedRepository.getByYear(year);

        const reportResult =
            await this.userActivityLogRepository.getUsersRegisteredVsUsersVerifiedGroupedPerYear(ReportResultMatchType.CurrentYear);

        const reportResultDbObject = new UsersRegisteredVsUsersVerifiedPerYearReportResultDbObject();
      
        reportResultDbObject.year = reportResult[0]['_id'];
        reportResultDbObject.usersVerifiedCount = reportResult[0]['userVerifiedCount'];
        reportResultDbObject.usersRegisteredCount = reportResult[0]['userRegisteredCount'];
        
        if (reportDataForCurrentYear && reportDataForCurrentYear._id) {
            //update existing one
            reportDataForCurrentYear.year = reportResultDbObject.year;
            reportDataForCurrentYear.usersRegisteredCount = reportResultDbObject.usersRegisteredCount;
            reportDataForCurrentYear.usersVerifiedCount = reportResultDbObject.usersVerifiedCount;
            
            await this.usersRegisteredVsUsersVerifiedRepository
                .updateObjectById(reportDataForCurrentYear._id, new UsersRegisteredVsUsersVerifiedPerYearReportResultDbObject(reportDataForCurrentYear));

        } else {
            await this.usersRegisteredVsUsersVerifiedRepository.create(reportResultDbObject);
        }
    }

    public async generateIncomingTicketsVsPersonalizedTicketsGroupedPerYear(organizerId: string) {
        //get current year
        //previous ones were already generated by this very same method...

        const year = moment().year()

        const reportDataForCurrentYear: IIncomingTicketsVsPersonalizedTicketsPerYearReportResultValue =
            await this.incomingTicketsVsPersonalizedTicketsRepository.getByYear(year, organizerId);

        const reportResult =
            await this.ticketTransactionRepository.getIncomingTicektsVsPersonalizedTicketsGroupedPerYear(ReportResultMatchType.CurrentYear, organizerId);

        const reportResultDbObject = new IncomingTicketsVsPersonalizedTicketsPerYearReportResultDbObject();

        reportResultDbObject.year = reportResult[0]['_id'];
        reportResultDbObject.incomingTicketsCount = reportResult[0]['incomingTicketsCount'];
        reportResultDbObject.personalizedTicketsCount = reportResult[0]['personalizedTicketsCount'];

        if (reportDataForCurrentYear && reportDataForCurrentYear._id) {
            //update existing one
            reportDataForCurrentYear.year = reportResultDbObject.year;
            reportDataForCurrentYear.incomingTicketsCount = reportResultDbObject.incomingTicketsCount;
            reportDataForCurrentYear.personalizedTicketsCount = reportResultDbObject.personalizedTicketsCount;
            
            await this.incomingTicketsVsPersonalizedTicketsRepository
                .updateObjectById(reportDataForCurrentYear._id, new IncomingTicketsVsPersonalizedTicketsPerYearReportResultDbObject(reportDataForCurrentYear));

        } else {
            await this.incomingTicketsVsPersonalizedTicketsRepository.create(reportResultDbObject);
        }
    }

    public async generateIncomingTicketsPerOrganizerGroupedPerMonth() {
        //get current month
        //previous ones were already generated by this very same method...

        const year = moment().year();
        const month = moment().month() + 1;

        const reportDataForCurrentYear: IIncomingTicketsPerOrganizerReportResultValue =
            await this.incomingTicketsPerOrganizerRepository.getByMonth(year, month);

        const reportResult =
            await this.ticketTransactionRepository.getIncomingTicketsGroupedPerMonthAndOrganizer(ReportResultMatchType.CurrentMonth);

        const reportResultDbObject = new IncomingTicketsPerOrganizerReportResultDbObject();

        if(reportResult) {
            reportResultDbObject.year = reportResult[0]['_id']['year'];
            reportResultDbObject.month = reportResult[0]['_id']['month'];
            reportResultDbObject.organizerId = reportResult[0]['_id']['organizerId'];
            reportResultDbObject.incomingTicketsCount = reportResult[0]['incomingTicketsCount'];    
        }
       
        if (reportDataForCurrentYear && reportDataForCurrentYear._id) {
            //update existing one
            reportDataForCurrentYear.year = reportResultDbObject.year;
            reportDataForCurrentYear.incomingTicketsCount = reportResultDbObject.incomingTicketsCount;
            reportDataForCurrentYear.organizerId = reportResultDbObject.organizerId;
            reportDataForCurrentYear.month = reportResultDbObject.month;
            
            await this.incomingTicketsPerOrganizerRepository
                .updateObjectById(reportDataForCurrentYear._id, new IncomingTicketsPerOrganizerReportResultDbObject(reportDataForCurrentYear));

        } else {
            await this.incomingTicketsPerOrganizerRepository.create(reportResultDbObject);
        }

    }
}